@inherits LayoutComponentBase
@inject DashboardTrilhasEsporte.Domain.Service.FiltroStateService FiltroService


<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
<MudPaper Class="d-flex justify-space-between align-center px-3 py-2" 
          Style="border-radius: 6px; background-color: transparent; position: fixed; top: 0; left: 0; right: 0; z-index: 1000;">
    
    <!-- Título à esquerda -->
    <MudText Typo="Typo.h4" Class="font-weight-bold">
    </MudText>

    <!-- Filtros e data à direita -->
    <div class="d-flex align-center gap-6">
        <MudText Typo="Typo.body1" Style="font-size: 1rem; white-space: nowrap;">
            <b>Última Atualização:</b> @DateTime.UtcNow.ToString("d MMM yyyy, HH:mm") GMT
        </MudText>

        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@OnFiltroClick">
            <MudIcon Icon="@Icons.Material.Filled.Search" Size="Size.Medium" Class="mr-1" />
            Filtros
        </MudButton>
    </div>

</MudPaper>


    <MudMainContent Class="pt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = true;
    private MudTheme? _theme = null;
    private bool mostrarFiltro = false;


    protected override void OnInitialized()
    {
        base.OnInitialized();

        _theme = new()
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private readonly PaletteLight _lightPalette = new()
    {
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "#ffffff",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#7e6fff",
        Surface = "#1e1e2d",
        Background = "#1a1a27",
        BackgroundGray = "#151521",
        AppbarText = "#92929f",
        AppbarBackground = "rgba(26,26,39,0.8)",
        DrawerBackground = "#1a1a27",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#b2b0bf",
        TextSecondary = "#92929f",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#92929f",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
    };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };

      void OnFiltroClick()
    {
        mostrarFiltro = !mostrarFiltro;
        FiltroService.ToggleFiltro();
        ScrollToTopAsync();
    }
    private async Task ScrollToTopAsync()
    {
        await JS.InvokeVoidAsync("window.scrollTo", 0, 0);
    }

    [Inject] IJSRuntime JS { get; set; }

    
}